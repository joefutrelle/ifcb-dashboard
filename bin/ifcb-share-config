#!/bin/bash

# if not root, re-execute using sudo
if [[ $(id -u) -ne 0 ]] ; then
    exec sudo bash $0 $1
fi

HEIGHT=10
WIDTH=50
HW="$HEIGHT $WIDTH"

function cancel {
    # indicate that the user has canceled
    dialog --infobox "Canceled." $HW
    exit 1
}

function test_retval {
    # cancel if return value is non-zero
    if (($? > 0)); then
	cancel
    fi
    return $?
}

function dialog_input() {
    # given a variable name and params to "dialog",
    # call the dialog function and save its stderr
    # output to the variable
    local tmpfile=$(mktemp)
    dialog "${@:2}" 2> $tmpfile
    test_retval
    eval "$1=$(< $tmpfile)"
    rm $tmpfile
}

sharehost=""

# marker comment in fstab file
MARKER_REGEX='IFCB dashboard .* mount'
HOST_DESCRIPTION_IFCB=IFCB
HOST_DESCRIPTION_SERVER=server

FSTAB=/etc/fstab

grep "\bcifs\b" /etc/fstab | grep -v "$MARKER_REGEX" >.existing_shares
if [[ $? == 0 ]]; then
    dialog --yesno "Existing share(s) found. Do you want to keep them?" $HW
    if [[ $? == 0 ]]; then
	while read line; do
	    sharepath=$(echo $line | awk '{print $1}')
	    dialog --yes-label "Data" --no-label "IFCB" --yesno "What kind of share is $sharepath?\n\n'Data' means your computer's hard drive\n'IFCB' means your IFCB's hard drive" $HW
	    if [[ $? == 0 ]]; then
		HOST_DESCRIPTION=$HOST_DESCRIPTION_SERVER
	    else
		HOST_DESCRIPTION=$HOST_DESCRIPTION_IFCB
	    fi
	    MARKER="# IFCB dashboard $HOST_DESCRIPTION mount"
	    NEW_FSTAB=$(fgrep -v "$line" /etc/fstab)
	    cp $FSTAB $FSTAB.bak
	    echo $NEW_FSTAB > $FSTAB
	    echo "$line $MARKER" >> $FSTAB
	done < .existing_shares
	dialog --defaultno --yesno "Do you still want to reconfigure your share(s)?" $HW
	test_retval
    fi
fi

dialog --yes-label "Computer" --no-label "IFCB" --yesno "What kind of share do you want to configure?" $HW
if [[ $? == 0 ]]; then
    HOST_DESCRIPTION=$HOST_DESCRIPTION_SERVER
else
    HOST_DESCRIPTION=$HOST_DESCRIPTION_IFCB
fi
MARKER="# IFCB dashboard $HOST_DESCRIPTION mount"

fgrep -q "$MARKER" $FSTAB
if [[ $? == 0 ]]; then
    dialog --yesno "This will unmount and replace your existing $HOST_DESCRIPTION mount. Do you want to continue?" $HW
    test_retval
fi

if [[ $HOST_DESCRIPTION = $HOST_DESCRIPTION_IFCB ]]; then
    CREDENTIALS_FILE=/home/vagrant/.ifcb_share_credentials
    HOST_EXAMPLE=192.168.1.23
    DEFAULT_MOUNT_POINT=/mnt/ifcb
else
    CREDENTIALS_FILE=/home/vagrant/.data_share_credentials
    HOST_EXAMPLE=myserver.somewhere.edu
    DEFAULT_MOUNT_POINT=/mnt/ifcb_data
fi

dialog_input sharehost --title "Share configuration" --clear --inputbox "Name or IP address of $HOST_DESCRIPTION\nexample: $HOST_EXAMPLE" $HW $sharehost

dialog_input shareuser --title "Share configuration" --clear --inputbox "Username to connect to $HOST_DESCRIPTION" $HW

dialog_input sharepwd --title "Share configuration" --clear --insecure --passwordbox "Password to connect to $HOST_DESCRIPTION" $HW

cat > $CREDENTIALS_FILE <<EOF
username=$shareuser
password=$sharepwd
EOF

if [[ $HOST_DESCRIPTION = IFCB ]]; then
    share=data
else
    dialog --infobox "Connecting to $sharehost ..." $HW

    smbclient -L $sharehost -A $CREDENTIALS_FILE -g 2>/dev/null >.smbclient

    if [[ ! $? == 0 ]]; then
	dialog --title "Connection error" --msgbox "Cannot connect to \"$sharehost\"\nCheck server address and username/password" 8 30
	exec sudo bash $0 $1
    fi

    sharelist=$(mktemp)

    sed -n -e '/^Disk/s/Disk|\(.*\)|.*/\1/p' .smbclient > $sharelist 2>/dev/null
    count=$(wc -l $sharelist | sed -e 's/ .*//')

    dialog_input sharechoice --title "Share configuration" --clear --menu "Select a share" 16 30 $count $(cat -n $sharelist)

    share=$(sed -e "$sharechoice!d" $sharelist)

    rm $sharelist
fi

while [[ ! "$sharemp" =~ ^/[^\ ]+$  ]]; do
    dialog_input sharemp --title "Share configuration" --clear --inputbox "Mount point$msg" $HW "$DEFAULT_MOUNT_POINT"
    msg="\nInvalid path: $sharemp"
done

# now perform the mount

# ensure marker is in fstab
MARKER="# IFCB dashboard $HOST_DESCRIPTION mount"

fgrep -q "$MARKER" $FSTAB
if [[ $? == 0 ]]; then
    # unmount existing share and delete mount point
    existing_mp=$(fgrep "$MARKER" $FSTAB | awk '{print $2}')

    if [ ! -z "$existing_mp" ]; then
	umount $existing_mp
	rmdir $existing_mp
    fi

    # remove entry
    sed -i.bak -e "/.*$MARKER/d" $FSTAB
fi

sharepath=//$sharehost/$share

# edit line into fstab
echo $sharepath $sharemp cifs credentials=$CREDENTIALS_FILE 0 0 $MARKER >> $FSTAB

# attempt to mount
mkdir -p $sharemp

dialog --title "Mounting share" --infobox "Please wait..." 4 40
mount $sharemp

if [[ ! $? == 0 ]]; then
    dialog --title "Error" --ok-label "Reconfigure" --msgbox "Unable to mount share" 6 30
    exec sudo bash $0 $1
fi    

dialog --title "Success" --infobox "Mounted share" 4 40
